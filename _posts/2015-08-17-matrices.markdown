---
layout: post
title:  "Matrices for Programming"
photo: articles/matrices
excerpt: A small tutorial on how matrices can be used to simplify complex calculations and boost efficiency at the same time.
date:   2015-08-17
categories: Article
tags: Math Matrices
---
Fluency with matrices is something that's required for mathematics and physics, but it's also super useful skill for a programmer. Matrices are really good for representing specific types of data and doing calculations with them can optimize your program quite a bit.

A matrix can be considered a kind of a two dimensional array, where data is stored as rows and columns. In this article I'm going to cover some common calculations made with matrices, then talk about how to use them for programming purposes.

### Matrix and vector basics

{% include centered-img.html path='articles/matrix01' %}

As mentioned above, a matrix consist of rows and columns. The matrix dimensions can be displayed as rows x columns as in the image above. A single value in a matrix A can be accessed as `rows x columns` where i is the row and j is the column of A. Usually in math, matrices are indexed starting from 1, but you can also have 0-indexed matrices.

{% include centered-img.html path='articles/matrix02' %}

Vector is a kind of a special case of a matrix. It has only single row or column. Vectors are often one of the most primitive data structures, especially in object oriented programming languages.

### Addition & scalar multiplication

Addition and matrix multiplication, also called as scalar multiplication are perhaps not the most useful operations for a programmer, but I will quickly go through them here in the name of wholeness.

{% include centered-img.html path='articles/matrix03' %}

Adding two matrices together is just adding each number from both the matrices on the same indexes together. The matrices need to be of the same dimension for this to work.

{% include centered-img.html path='articles/matrix04' %}

In multiplication, you simply multiply each number with the multiplier. Division is done in exact same manner. Combinations of addition, multiplication and so on follow normal order of operations in mathematics.

### Multiplying two matrices

Now what's really interesting, is multiplying two matrices together. This will not only allow us to simplify our code when we would otherwise require complex calculation loops, but also makes the functions more efficient! What is there not to love!

I will show you how to use these in real programming situations in no time, but first, let's look at how multiplying two matrices together actually works and which are the most important rules that apply.

{% include centered-img.html path='articles/matrix05' %}

First thing you should know is to multiply two matrices together, the width of the first matrix has to be the same as the height of the second. If they are the other way around, you can't just swap them around and expect to get the same result. So the second rule is that matrix to matrix multiplication is not commutative: A times B is not the same as B times A!

The dimensions of the outcome matrix will be the height of the first matrix and the width of the second. If one of the matrices is a vector, it's all good, remember that vector is just a special case of a matrix and treat it as one.

{% include centered-img.html path='articles/matrix06' %}

To generate the first column of your outcome, what you want to do is take the first row of matrix A and calculate the sum of multiplying each index of the row with the corresponding index of the first column of matrix B. This is the topmost value in the first column of the outcome.

To get the second value, you just take the second row of A and repeat with the first column of B. Do this for all the rows in A, always using the first column of B.

{% include centered-img.html path='articles/matrix07' %}

To get the second column of the outcome, you once again start by taking the first row of A, but this time calculate the sum of multiplying each index with the corresponding index from the second column of B. Then continue with the second row of A and second row of B and so on.

Once you have repeated this with all the columns on B (if you have more than in the example), your outcome matrix should be filled.

### Matrix transpose

In most cases, matrix to matrix multiplication can get you far, but sometimes you also need to calculate a matrix transpose. Lucky for you, that's super easy!

{% include centered-img.html path='articles/matrix09' %}

Matrix transpose is just the matrix rows shifted to columns instead. So the first row of the matrix becomes the first column and so on.

### Fibonacci with matrices

Any coding tutorials without an example of how to calculate Fibonacci numbers would not be complete, so let's look at how to do this with matrices. Fibonacci numbers are a sequence of numbers starting from 0 and 1 , where the subsequent number is always the sum of the two previous two numbers. So the first Fibonacci numbers are `0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89â€¦`

You can calculate the n:th Fibonacci number by a recursive tree function, but this will lead to exponential time for the function's time complexity! To do a bit better, you could reduce the time complexity to linear time by simply memorizing the two previous numbers and just looping until you're at the desired value. With matrices however, you can do even better and reduce the time complexity to logarithmic time.

Every time you have a calculation, where you need to repeat a same kind of calculation again and again, like the one used to calculate the n:th Fibonacci number:

```
do n times:
  a := b
  b := a + b
```

You can instead create a multiplier matrix with the increase / decrease of the values in your linear time function and multiply them with the starting values like so:

{% include centered-img.html path='articles/matrix10' %}

To get the n:th Fibonacci you just repeat the process n times. This will simplify to raising the multiplier function to the power of n and then multiplying with the starting values:

{% include centered-img.html path='articles/matrix11' %}

Exponentiation of matrices can be done in logarithmic time:

{% include centered-img.html path='articles/matrix12' %}

If this seems obscure, you can check the java implementation below to see all the steps needed to calculate the n:th Fibonacci. This solution will work until the 92:th Fibonacci, after which Java Long is not enough to display the result. Bigger results could be calculated with ease: I used a version of this that would only print the modulo of the result to calculate the 50,000,000,000,000,000:th Fibonacci number in just 0.15 seconds!

{% gist DarthKipsu/a10b95937dc0c154291f %}
